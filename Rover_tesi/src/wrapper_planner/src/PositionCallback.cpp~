#include "ros/ros.h"
#include "std_msgs/String.h"
#include "nav_msgs/OccupancyGrid.h"
#include <cstdio>
#include "ros/console.h"
#include <sstream>
#include "nav_msgs/MapMetaData.h"
#include "stdio.h"
#include <iostream>
#include <fstream> //header necessario per ofstream!
#include <tf/transform_listener.h>
#define EPSILON_ROT 0.05
#define EPSILON_LIN 0.005

using namespace std;

void positionCallback(const geometry_msgs::TwistConstPtr& cmdVel)
{
	tf::TransformListener listener;
	ros::Rate rate(10);
	tf::StampedTransform transform;
	double start_x;
	double start_y;
	int cell_x,cell_y;
	geometry_msgs::TwistConstPtr ptr= cmdVel;
	
	//ad ogni comando dato al robot leggo la posizione corrente
	try
	{
		listener.waitForTransform("/map", "/base_link", ros::Time(0), ros::Duration(2.0) );
		listener.lookupTransform("/map","/base_link",ros::Time(0), transform);
	}
	catch (tf::TransformException ex)
	{
		ROS_ERROR("Nope! %s", ex.what());
		//ros::Duration(1.0).sleep();
	} 
	    
	start_x=transform.getOrigin().x();
	start_y=transform.getOrigin().y();
	ReturnCoordinateCells(&cell_x, &cell_y,start_x,start_y);
	printf("Sono alla casella: [%d,%d]\n",cell_x,cell_y);
}




int main(int argc, char **argv)
{
  ros::init(argc, argv, "Wrapper_planner");
  ros::NodeHandle n;

 
  
  //debug
  ros::Subscriber subVel = n.subscribe("/husky/cmd_vel", 10, positionCallback);
  

 

  ros::spin();
  


  return 0;
}
